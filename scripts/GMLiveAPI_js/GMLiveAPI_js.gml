// You can comment out this whole file if you don't use HTML5
function live_preinit_js_dummy() {}
if(live_enabled)
function live_preinit_js_func_0(l_ind) {
	switch (l_ind) {
		case 0: return is_real;
		case 1: return is_numeric;
		case 2: return is_string;
		case 3: return is_array;
		case 4: return is_undefined;
		case 5: return is_int32;
		case 6: return is_int64;
		case 7: return is_ptr;
		case 8: return is_vec3;
		case 9: return is_vec4;
		case 10: return is_matrix;
		case 11: return is_bool;
		case 12: return is_nan;
		case 13: return is_infinity;
		case 14: return is_struct;
		case 15: return is_method;
		case 16: return typeof;
		case 17: return instanceof;
		case 18: return exception_unhandled_handler;
		case 19: return variable_global_exists;
		case 20: return variable_global_get;
		case 21: return variable_global_set;
		case 22: return variable_instance_exists;
		case 23: return variable_instance_get;
		case 24: return variable_instance_set;
		case 25: return variable_instance_get_names;
		case 26: return variable_instance_names_count;
		case 27: return variable_struct_exists;
		case 28: return variable_struct_get;
		case 29: return variable_struct_set;
		case 30: return variable_struct_get_names;
		case 31: return variable_struct_names_count;
		case 32: return variable_struct_remove;
		case 33: return array_length;
		case 34: return array_equals;
		case 35: return array_create;
		case 36: return array_copy;
		case 37: return array_resize;
		case 38: return array_get;
		case 39: return array_set;
		case 40: return array_push;
		case 41: return array_pop;
		case 42: return array_insert;
		case 43: return array_delete;
		case 44: return array_sort;
		case 45: return array_first;
		case 46: return array_last;
		case 47: return array_create_ext;
		case 48: return array_find_index;
		case 49: return array_any;
		case 50: return array_all;
		case 51: return array_foreach;
		case 52: return array_reduce;
		case 53: return array_filter;
		case 54: return array_filter_ext;
		case 55: return array_map;
		case 56: return array_map_ext;
		case 57: return array_copy_while;
		case 58: return array_unique;
		case 59: return array_unique_ext;
		case 60: return array_reverse;
		case 61: return array_reverse_ext;
		case 62: return array_concat;
		case 63: return array_union;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_64(l_ind) {
	switch (l_ind) {
		case 64: return array_intersection;
		case 65: return random;
		case 66: return random_range;
		case 67: return irandom;
		case 68: return irandom_range;
		case 69: return random_set_seed;
		case 70: return random_get_seed;
		case 71: return randomize;
		case 72: return randomise;
		case 73: return abs;
		case 74: return round;
		case 75: return floor;
		case 76: return ceil;
		case 77: return sign;
		case 78: return frac;
		case 79: return sqrt;
		case 80: return sqr;
		case 81: return exp;
		case 82: return ln;
		case 83: return log2;
		case 84: return log10;
		case 85: return sin;
		case 86: return cos;
		case 87: return tan;
		case 88: return arcsin;
		case 89: return arccos;
		case 90: return arctan;
		case 91: return arctan2;
		case 92: return dsin;
		case 93: return dcos;
		case 94: return dtan;
		case 95: return darcsin;
		case 96: return darccos;
		case 97: return darctan;
		case 98: return darctan2;
		case 99: return degtorad;
		case 100: return radtodeg;
		case 101: return power;
		case 102: return logn;
		case 103: return mean;
		case 104: return median;
		case 105: return clamp;
		case 106: return lerp;
		case 107: return dot_product;
		case 108: return dot_product_3d;
		case 109: return dot_product_normalised;
		case 110: return dot_product_3d_normalised;
		case 111: return dot_product_normalized;
		case 112: return dot_product_3d_normalized;
		case 113: return math_set_epsilon;
		case 114: return math_get_epsilon;
		case 115: return angle_difference;
		case 116: return point_distance_3d;
		case 117: return point_distance;
		case 118: return point_direction;
		case 119: return lengthdir_x;
		case 120: return lengthdir_y;
		case 121: return real;
		case 122: return bool;
		case 123: return string;
		case 124: return int64;
		case 125: return ptr;
		case 126: return string_format;
		case 127: return chr;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_128(l_ind) {
	switch (l_ind) {
		case 128: return ansi_char;
		case 129: return ord;
		case 130: return method;
		case 131: return method_get_index;
		case 132: return method_get_self;
		case 133: return string_length;
		case 134: return string_byte_length;
		case 135: return string_pos;
		case 136: return string_pos_ext;
		case 137: return string_last_pos;
		case 138: return string_last_pos_ext;
		case 139: return string_copy;
		case 140: return string_char_at;
		case 141: return string_ord_at;
		case 142: return string_byte_at;
		case 143: return string_set_byte_at;
		case 144: return string_delete;
		case 145: return string_insert;
		case 146: return string_lower;
		case 147: return string_upper;
		case 148: return string_repeat;
		case 149: return string_letters;
		case 150: return string_digits;
		case 151: return string_lettersdigits;
		case 152: return string_replace;
		case 153: return string_replace_all;
		case 154: return string_count;
		case 155: return string_hash_to_newline;
		case 156: return string_ext;
		case 157: return string_trim_start;
		case 158: return string_trim_end;
		case 159: return string_trim;
		case 160: return string_starts_with;
		case 161: return string_ends_with;
		case 162: return string_split;
		case 163: return string_split_ext;
		case 164: return string_join;
		case 165: return string_join_ext;
		case 166: return string_concat;
		case 167: return string_concat_ext;
		case 168: return string_foreach;
		case 169: return clipboard_has_text;
		case 170: return clipboard_set_text;
		case 171: return clipboard_get_text;
		case 172: return date_current_datetime;
		case 173: return date_create_datetime;
		case 174: return date_valid_datetime;
		case 175: return date_inc_year;
		case 176: return date_inc_month;
		case 177: return date_inc_week;
		case 178: return date_inc_day;
		case 179: return date_inc_hour;
		case 180: return date_inc_minute;
		case 181: return date_inc_second;
		case 182: return date_get_year;
		case 183: return date_get_month;
		case 184: return date_get_week;
		case 185: return date_get_day;
		case 186: return date_get_hour;
		case 187: return date_get_minute;
		case 188: return date_get_second;
		case 189: return date_get_weekday;
		case 190: return date_get_day_of_year;
		case 191: return date_get_hour_of_year;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_192(l_ind) {
	switch (l_ind) {
		case 192: return date_get_minute_of_year;
		case 193: return date_get_second_of_year;
		case 194: return date_year_span;
		case 195: return date_month_span;
		case 196: return date_week_span;
		case 197: return date_day_span;
		case 198: return date_hour_span;
		case 199: return date_minute_span;
		case 200: return date_second_span;
		case 201: return date_compare_datetime;
		case 202: return date_compare_date;
		case 203: return date_compare_time;
		case 204: return date_date_of;
		case 205: return date_time_of;
		case 206: return date_datetime_string;
		case 207: return date_date_string;
		case 208: return date_time_string;
		case 209: return date_days_in_month;
		case 210: return date_days_in_year;
		case 211: return date_leap_year;
		case 212: return date_is_today;
		case 213: return date_set_timezone;
		case 214: return date_get_timezone;
		case 215: return game_set_speed;
		case 216: return game_get_speed;
		case 217: return motion_set;
		case 218: return motion_add;
		case 219: return place_free;
		case 220: return place_empty;
		case 221: return place_meeting;
		case 222: return place_snapped;
		case 223: return move_random;
		case 224: return move_snap;
		case 225: return move_towards_point;
		case 226: return move_contact_solid;
		case 227: return move_contact_all;
		case 228: return move_outside_solid;
		case 229: return move_outside_all;
		case 230: return move_bounce_solid;
		case 231: return move_bounce_all;
		case 232: return move_wrap;
		case 233: return distance_to_point;
		case 234: return distance_to_object;
		case 235: return position_empty;
		case 236: return position_meeting;
		case 237: return path_start;
		case 238: return path_end;
		case 239: return mp_linear_step;
		case 240: return mp_potential_step;
		case 241: return mp_linear_step_object;
		case 242: return mp_potential_step_object;
		case 243: return mp_potential_settings;
		case 244: return mp_linear_path;
		case 245: return mp_potential_path;
		case 246: return mp_linear_path_object;
		case 247: return mp_potential_path_object;
		case 248: return mp_grid_create;
		case 249: return mp_grid_destroy;
		case 250: return mp_grid_clear_all;
		case 251: return mp_grid_clear_cell;
		case 252: return mp_grid_clear_rectangle;
		case 253: return mp_grid_add_cell;
		case 254: return mp_grid_get_cell;
		case 255: return mp_grid_add_rectangle;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_256(l_ind) {
	switch (l_ind) {
		case 256: return mp_grid_add_instances;
		case 257: return mp_grid_path;
		case 258: return mp_grid_draw;
		case 259: return mp_grid_to_ds_grid;
		case 260: return collision_point;
		case 261: return collision_rectangle;
		case 262: return collision_circle;
		case 263: return collision_ellipse;
		case 264: return collision_line;
		case 265: return collision_point_list;
		case 266: return collision_rectangle_list;
		case 267: return collision_circle_list;
		case 268: return collision_ellipse_list;
		case 269: return collision_line_list;
		case 270: return instance_position_list;
		case 271: return instance_place_list;
		case 272: return point_in_rectangle;
		case 273: return point_in_triangle;
		case 274: return point_in_circle;
		case 275: return rectangle_in_rectangle;
		case 276: return rectangle_in_triangle;
		case 277: return rectangle_in_circle;
		case 278: return instance_find;
		case 279: return instance_exists;
		case 280: return instance_number;
		case 281: return instance_position;
		case 282: return instance_nearest;
		case 283: return instance_furthest;
		case 284: return instance_place;
		case 285: return instance_create_depth;
		case 286: return instance_create_layer;
		case 287: return instance_copy;
		case 288: return instance_change;
		case 289: return instance_destroy;
		case 290: return position_destroy;
		case 291: return position_change;
		case 292: return instance_id_get;
		case 293: return instance_deactivate_all;
		case 294: return instance_deactivate_object;
		case 295: return instance_deactivate_region;
		case 296: return instance_activate_all;
		case 297: return instance_activate_object;
		case 298: return instance_activate_region;
		case 299: return room_goto;
		case 300: return room_goto_previous;
		case 301: return room_goto_next;
		case 302: return room_previous;
		case 303: return room_next;
		case 304: return room_restart;
		case 305: return game_end;
		case 306: return game_restart;
		case 307: return game_load;
		case 308: return game_save;
		case 309: return game_save_buffer;
		case 310: return game_load_buffer;
		case 311: return scheduler_resolution_set;
		case 312: return scheduler_resolution_get;
		case 313: return event_perform;
		case 314: return event_perform_async;
		case 315: return event_user;
		case 316: return event_perform_object;
		case 317: return event_inherited;
		case 318: return show_debug_message;
		case 319: return show_debug_message_ext;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_320(l_ind) {
	switch (l_ind) {
		case 320: return show_debug_overlay;
		case 321: return debug_event;
		case 322: return debug_get_callstack;
		case 323: return alarm_get;
		case 324: return alarm_set;
		case 325: return keyboard_set_map;
		case 326: return keyboard_get_map;
		case 327: return keyboard_unset_map;
		case 328: return keyboard_check;
		case 329: return keyboard_check_pressed;
		case 330: return keyboard_check_released;
		case 331: return keyboard_check_direct;
		case 332: return keyboard_get_numlock;
		case 333: return keyboard_set_numlock;
		case 334: return keyboard_key_press;
		case 335: return keyboard_key_release;
		case 336: return keyboard_clear;
		case 337: return io_clear;
		case 338: return mouse_check_button;
		case 339: return mouse_check_button_pressed;
		case 340: return mouse_check_button_released;
		case 341: return mouse_wheel_up;
		case 342: return mouse_wheel_down;
		case 343: return mouse_clear;
		case 344: return draw_self;
		case 345: return draw_sprite;
		case 346: return draw_sprite_pos;
		case 347: return draw_sprite_ext;
		case 348: return draw_sprite_stretched;
		case 349: return draw_sprite_stretched_ext;
		case 350: return draw_sprite_tiled;
		case 351: return draw_sprite_tiled_ext;
		case 352: return draw_sprite_part;
		case 353: return draw_sprite_part_ext;
		case 354: return draw_sprite_general;
		case 355: return draw_clear;
		case 356: return draw_clear_alpha;
		case 357: return draw_point;
		case 358: return draw_line;
		case 359: return draw_line_width;
		case 360: return draw_rectangle;
		case 361: return draw_roundrect;
		case 362: return draw_roundrect_ext;
		case 363: return draw_triangle;
		case 364: return draw_circle;
		case 365: return draw_ellipse;
		case 366: return draw_set_circle_precision;
		case 367: return draw_arrow;
		case 368: return draw_button;
		case 369: return draw_path;
		case 370: return draw_healthbar;
		case 371: return draw_getpixel;
		case 372: return draw_getpixel_ext;
		case 373: return draw_set_colour;
		case 374: return draw_set_color;
		case 375: return draw_set_alpha;
		case 376: return draw_get_colour;
		case 377: return draw_get_color;
		case 378: return draw_get_alpha;
		case 379: return merge_colour;
		case 380: return make_colour_rgb;
		case 381: return make_colour_hsv;
		case 382: return colour_get_red;
		case 383: return colour_get_green;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_384(l_ind) {
	switch (l_ind) {
		case 384: return colour_get_blue;
		case 385: return colour_get_hue;
		case 386: return colour_get_saturation;
		case 387: return colour_get_value;
		case 388: return merge_color;
		case 389: return make_color_rgb;
		case 390: return make_color_hsv;
		case 391: return color_get_red;
		case 392: return color_get_green;
		case 393: return color_get_blue;
		case 394: return color_get_hue;
		case 395: return color_get_saturation;
		case 396: return color_get_value;
		case 397: return screen_save;
		case 398: return screen_save_part;
		case 399: return gif_open;
		case 400: return gif_add_surface;
		case 401: return gif_save;
		case 402: return gif_save_buffer;
		case 403: return draw_set_font;
		case 404: return draw_get_font;
		case 405: return draw_set_halign;
		case 406: return draw_get_halign;
		case 407: return draw_set_valign;
		case 408: return draw_get_valign;
		case 409: return draw_text;
		case 410: return draw_text_ext;
		case 411: return string_width;
		case 412: return string_height;
		case 413: return string_width_ext;
		case 414: return string_height_ext;
		case 415: return draw_text_transformed;
		case 416: return draw_text_ext_transformed;
		case 417: return draw_text_colour;
		case 418: return draw_text_ext_colour;
		case 419: return draw_text_transformed_colour;
		case 420: return draw_text_ext_transformed_colour;
		case 421: return draw_text_color;
		case 422: return draw_text_ext_color;
		case 423: return draw_text_transformed_color;
		case 424: return draw_text_ext_transformed_color;
		case 425: return draw_point_colour;
		case 426: return draw_line_colour;
		case 427: return draw_line_width_colour;
		case 428: return draw_rectangle_colour;
		case 429: return draw_roundrect_colour;
		case 430: return draw_roundrect_colour_ext;
		case 431: return draw_triangle_colour;
		case 432: return draw_circle_colour;
		case 433: return draw_ellipse_colour;
		case 434: return draw_point_color;
		case 435: return draw_line_color;
		case 436: return draw_line_width_color;
		case 437: return draw_rectangle_color;
		case 438: return draw_roundrect_color;
		case 439: return draw_roundrect_color_ext;
		case 440: return draw_triangle_color;
		case 441: return draw_circle_color;
		case 442: return draw_ellipse_color;
		case 443: return draw_primitive_begin;
		case 444: return draw_vertex;
		case 445: return draw_vertex_colour;
		case 446: return draw_vertex_color;
		case 447: return draw_primitive_end;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_448(l_ind) {
	switch (l_ind) {
		case 448: return sprite_get_uvs;
		case 449: return font_get_uvs;
		case 450: return font_get_info;
		case 451: return font_cache_glyph;
		case 452: return sprite_get_texture;
		case 453: return font_get_texture;
		case 454: return texture_get_width;
		case 455: return texture_get_height;
		case 456: return texture_get_uvs;
		case 457: return draw_primitive_begin_texture;
		case 458: return draw_vertex_texture;
		case 459: return draw_vertex_texture_colour;
		case 460: return draw_vertex_texture_color;
		case 461: return texture_global_scale;
		case 462: return surface_create;
		case 463: return surface_create_ext;
		case 464: return surface_resize;
		case 465: return surface_free;
		case 466: return surface_exists;
		case 467: return surface_get_width;
		case 468: return surface_get_height;
		case 469: return surface_get_texture;
		case 470: return surface_set_target;
		case 471: return surface_set_target_ext;
		case 472: return surface_get_target;
		case 473: return surface_get_target_ext;
		case 474: return surface_reset_target;
		case 475: return surface_depth_disable;
		case 476: return surface_get_depth_disable;
		case 477: return draw_surface;
		case 478: return draw_surface_stretched;
		case 479: return draw_surface_tiled;
		case 480: return draw_surface_part;
		case 481: return draw_surface_ext;
		case 482: return draw_surface_stretched_ext;
		case 483: return draw_surface_tiled_ext;
		case 484: return draw_surface_part_ext;
		case 485: return draw_surface_general;
		case 486: return surface_getpixel;
		case 487: return surface_getpixel_ext;
		case 488: return surface_save;
		case 489: return surface_save_part;
		case 490: return surface_copy;
		case 491: return surface_copy_part;
		case 492: return application_surface_draw_enable;
		case 493: return application_get_position;
		case 494: return application_surface_enable;
		case 495: return application_surface_is_enabled;
		case 496: return video_open;
		case 497: return video_close;
		case 498: return video_set_volume;
		case 499: return video_draw;
		case 500: return video_pause;
		case 501: return video_resume;
		case 502: return video_enable_loop;
		case 503: return video_seek_to;
		case 504: return video_get_duration;
		case 505: return video_get_position;
		case 506: return video_get_status;
		case 507: return video_get_format;
		case 508: return video_is_looping;
		case 509: return video_get_volume;
		case 510: return display_get_width;
		case 511: return display_get_height;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_512(l_ind) {
	switch (l_ind) {
		case 512: return display_get_orientation;
		case 513: return display_get_gui_width;
		case 514: return display_get_gui_height;
		case 515: return display_get_frequency;
		case 516: return display_reset;
		case 517: return display_mouse_get_x;
		case 518: return display_mouse_get_y;
		case 519: return display_mouse_set;
		case 520: return display_set_ui_visibility;
		case 521: return window_set_fullscreen;
		case 522: return window_get_fullscreen;
		case 523: return window_set_caption;
		case 524: return window_set_min_width;
		case 525: return window_set_max_width;
		case 526: return window_set_min_height;
		case 527: return window_set_max_height;
		case 528: return window_get_visible_rects;
		case 529: return window_get_caption;
		case 530: return window_set_cursor;
		case 531: return window_get_cursor;
		case 532: return window_set_colour;
		case 533: return window_get_colour;
		case 534: return window_set_color;
		case 535: return window_get_color;
		case 536: return window_set_position;
		case 537: return window_set_size;
		case 538: return window_set_rectangle;
		case 539: return window_center;
		case 540: return window_get_x;
		case 541: return window_get_y;
		case 542: return window_get_width;
		case 543: return window_get_height;
		case 544: return window_mouse_get_x;
		case 545: return window_mouse_get_y;
		case 546: return window_mouse_set;
		case 547: return window_view_mouse_get_x;
		case 548: return window_view_mouse_get_y;
		case 549: return window_views_mouse_get_x;
		case 550: return window_views_mouse_get_y;
		case 551: return audio_listener_position;
		case 552: return audio_listener_velocity;
		case 553: return audio_listener_orientation;
		case 554: return audio_emitter_position;
		case 555: return audio_emitter_create;
		case 556: return audio_emitter_free;
		case 557: return audio_emitter_exists;
		case 558: return audio_emitter_pitch;
		case 559: return audio_emitter_velocity;
		case 560: return audio_emitter_falloff;
		case 561: return audio_emitter_gain;
		case 562: return audio_play_sound;
		case 563: return audio_play_sound_on;
		case 564: return audio_play_sound_at;
		case 565: return audio_stop_sound;
		case 566: return audio_resume_sound;
		case 567: return audio_pause_sound;
		case 568: return audio_channel_num;
		case 569: return audio_sound_length;
		case 570: return audio_get_type;
		case 571: return audio_falloff_set_model;
		case 572: return audio_master_gain;
		case 573: return audio_sound_gain;
		case 574: return audio_sound_pitch;
		case 575: return audio_stop_all;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_576(l_ind) {
	switch (l_ind) {
		case 576: return audio_resume_all;
		case 577: return audio_pause_all;
		case 578: return audio_is_playing;
		case 579: return audio_is_paused;
		case 580: return audio_exists;
		case 581: return audio_system_is_available;
		case 582: return audio_sound_is_playable;
		case 583: return audio_emitter_get_gain;
		case 584: return audio_emitter_get_pitch;
		case 585: return audio_emitter_get_x;
		case 586: return audio_emitter_get_y;
		case 587: return audio_emitter_get_z;
		case 588: return audio_emitter_get_vx;
		case 589: return audio_emitter_get_vy;
		case 590: return audio_emitter_get_vz;
		case 591: return audio_listener_set_position;
		case 592: return audio_listener_set_velocity;
		case 593: return audio_listener_set_orientation;
		case 594: return audio_listener_get_data;
		case 595: return audio_set_master_gain;
		case 596: return audio_get_master_gain;
		case 597: return audio_sound_get_gain;
		case 598: return audio_sound_get_pitch;
		case 599: return audio_get_name;
		case 600: return audio_sound_set_track_position;
		case 601: return audio_sound_get_track_position;
		case 602: return audio_create_stream;
		case 603: return audio_destroy_stream;
		case 604: return audio_create_sync_group;
		case 605: return audio_destroy_sync_group;
		case 606: return audio_play_in_sync_group;
		case 607: return audio_start_sync_group;
		case 608: return audio_stop_sync_group;
		case 609: return audio_pause_sync_group;
		case 610: return audio_resume_sync_group;
		case 611: return audio_sync_group_get_track_pos;
		case 612: return audio_sync_group_debug;
		case 613: return audio_sync_group_is_playing;
		case 614: return audio_sync_group_is_paused;
		case 615: return audio_debug;
		case 616: return audio_group_load;
		case 617: return audio_group_unload;
		case 618: return audio_group_is_loaded;
		case 619: return audio_group_load_progress;
		case 620: return audio_group_name;
		case 621: return audio_group_stop_all;
		case 622: return audio_group_set_gain;
		case 623: return audio_group_get_gain;
		case 624: return audio_create_buffer_sound;
		case 625: return audio_free_buffer_sound;
		case 626: return audio_create_play_queue;
		case 627: return audio_free_play_queue;
		case 628: return audio_queue_sound;
		case 629: return audio_get_recorder_count;
		case 630: return audio_get_recorder_info;
		case 631: return audio_start_recording;
		case 632: return audio_stop_recording;
		case 633: return audio_sound_get_listener_mask;
		case 634: return audio_emitter_get_listener_mask;
		case 635: return audio_get_listener_mask;
		case 636: return audio_sound_set_listener_mask;
		case 637: return audio_emitter_set_listener_mask;
		case 638: return audio_set_listener_mask;
		case 639: return audio_get_listener_count;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_640(l_ind) {
	switch (l_ind) {
		case 640: return audio_get_listener_info;
		case 641: return show_message;
		case 642: return show_message_async;
		case 643: return clickable_add;
		case 644: return clickable_add_ext;
		case 645: return clickable_change;
		case 646: return clickable_change_ext;
		case 647: return clickable_delete;
		case 648: return clickable_exists;
		case 649: return clickable_set_style;
		case 650: return show_question;
		case 651: return show_question_async;
		case 652: return get_integer;
		case 653: return get_string;
		case 654: return get_integer_async;
		case 655: return get_string_async;
		case 656: return get_login_async;
		case 657: return get_open_filename;
		case 658: return get_save_filename;
		case 659: return get_open_filename_ext;
		case 660: return get_save_filename_ext;
		case 661: return show_error;
		case 662: return highscore_clear;
		case 663: return highscore_add;
		case 664: return highscore_value;
		case 665: return highscore_name;
		case 666: return draw_highscore;
		case 667: return sprite_exists;
		case 668: return sprite_get_name;
		case 669: return sprite_get_number;
		case 670: return sprite_get_width;
		case 671: return sprite_get_height;
		case 672: return sprite_get_xoffset;
		case 673: return sprite_get_yoffset;
		case 674: return sprite_get_bbox_mode;
		case 675: return sprite_get_bbox_left;
		case 676: return sprite_get_bbox_right;
		case 677: return sprite_get_bbox_top;
		case 678: return sprite_get_bbox_bottom;
		case 679: return sprite_set_bbox_mode;
		case 680: return sprite_set_bbox;
		case 681: return sprite_save;
		case 682: return sprite_save_strip;
		case 683: return sprite_set_cache_size;
		case 684: return sprite_set_cache_size_ext;
		case 685: return sprite_get_tpe;
		case 686: return sprite_prefetch;
		case 687: return sprite_prefetch_multi;
		case 688: return sprite_flush;
		case 689: return sprite_flush_multi;
		case 690: return sprite_set_speed;
		case 691: return sprite_get_speed_type;
		case 692: return sprite_get_speed;
		case 693: return sprite_get_info;
		case 694: return sprite_get_nineslice;
		case 695: return sprite_set_nineslice;
		case 696: return sprite_nineslice_create;
		case 697: return texture_is_ready;
		case 698: return texture_prefetch;
		case 699: return texture_flush;
		case 700: return texturegroup_get_textures;
		case 701: return texturegroup_get_sprites;
		case 702: return texturegroup_get_fonts;
		case 703: return texturegroup_get_tilesets;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_704(l_ind) {
	switch (l_ind) {
		case 704: return texturegroup_load;
		case 705: return texturegroup_unload;
		case 706: return texturegroup_get_status;
		case 707: return texturegroup_set_mode;
		case 708: return texture_debug_messages;
		case 709: return font_exists;
		case 710: return font_get_name;
		case 711: return font_get_fontname;
		case 712: return font_get_bold;
		case 713: return font_get_italic;
		case 714: return font_get_first;
		case 715: return font_get_last;
		case 716: return font_get_size;
		case 717: return font_set_cache_size;
		case 718: return path_exists;
		case 719: return path_get_name;
		case 720: return path_get_length;
		case 721: return path_get_kind;
		case 722: return path_get_closed;
		case 723: return path_get_precision;
		case 724: return path_get_number;
		case 725: return path_get_point_x;
		case 726: return path_get_point_y;
		case 727: return path_get_point_speed;
		case 728: return path_get_x;
		case 729: return path_get_y;
		case 730: return path_get_speed;
		case 731: return script_exists;
		case 732: return script_get_name;
		case 733: return timeline_add;
		case 734: return timeline_delete;
		case 735: return timeline_clear;
		case 736: return timeline_exists;
		case 737: return timeline_get_name;
		case 738: return timeline_moment_clear;
		case 739: return timeline_moment_add_script;
		case 740: return timeline_size;
		case 741: return timeline_max_moment;
		case 742: return object_exists;
		case 743: return object_get_name;
		case 744: return object_get_sprite;
		case 745: return object_get_solid;
		case 746: return object_get_visible;
		case 747: return object_get_persistent;
		case 748: return object_get_mask;
		case 749: return object_get_parent;
		case 750: return object_get_physics;
		case 751: return object_is_ancestor;
		case 752: return room_exists;
		case 753: return room_get_name;
		case 754: return sprite_set_offset;
		case 755: return sprite_duplicate;
		case 756: return sprite_assign;
		case 757: return sprite_merge;
		case 758: return sprite_add;
		case 759: return sprite_replace;
		case 760: return sprite_create_from_surface;
		case 761: return sprite_add_from_surface;
		case 762: return sprite_delete;
		case 763: return sprite_set_alpha_from_sprite;
		case 764: return sprite_collision_mask;
		case 765: return font_add_enable_aa;
		case 766: return font_add_get_enable_aa;
		case 767: return font_add;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_768(l_ind) {
	switch (l_ind) {
		case 768: return font_add_sprite;
		case 769: return font_add_sprite_ext;
		case 770: return font_replace_sprite;
		case 771: return font_replace_sprite_ext;
		case 772: return font_delete;
		case 773: return path_set_kind;
		case 774: return path_set_closed;
		case 775: return path_set_precision;
		case 776: return path_add;
		case 777: return path_assign;
		case 778: return path_duplicate;
		case 779: return path_append;
		case 780: return path_delete;
		case 781: return path_add_point;
		case 782: return path_insert_point;
		case 783: return path_change_point;
		case 784: return path_delete_point;
		case 785: return path_clear_points;
		case 786: return path_reverse;
		case 787: return path_mirror;
		case 788: return path_flip;
		case 789: return path_rotate;
		case 790: return path_rescale;
		case 791: return path_shift;
		case 792: return object_set_sprite;
		case 793: return object_set_solid;
		case 794: return object_set_visible;
		case 795: return object_set_persistent;
		case 796: return object_set_mask;
		case 797: return room_set_width;
		case 798: return room_set_height;
		case 799: return room_set_persistent;
		case 800: return room_set_viewport;
		case 801: return room_get_viewport;
		case 802: return room_set_view_enabled;
		case 803: return room_add;
		case 804: return room_duplicate;
		case 805: return room_assign;
		case 806: return room_instance_add;
		case 807: return room_instance_clear;
		case 808: return room_get_camera;
		case 809: return room_set_camera;
		case 810: return asset_get_index;
		case 811: return asset_get_type;
		case 812: return file_text_open_from_string;
		case 813: return file_text_open_read;
		case 814: return file_text_open_write;
		case 815: return file_text_open_append;
		case 816: return file_text_close;
		case 817: return file_text_write_string;
		case 818: return file_text_write_real;
		case 819: return file_text_writeln;
		case 820: return file_text_read_string;
		case 821: return file_text_read_real;
		case 822: return file_text_readln;
		case 823: return file_text_eof;
		case 824: return file_text_eoln;
		case 825: return file_exists;
		case 826: return file_delete;
		case 827: return file_rename;
		case 828: return file_copy;
		case 829: return directory_exists;
		case 830: return directory_create;
		case 831: return directory_destroy;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_832(l_ind) {
	switch (l_ind) {
		case 832: return file_find_first;
		case 833: return file_find_next;
		case 834: return file_find_close;
		case 835: return file_attributes;
		case 836: return filename_name;
		case 837: return filename_path;
		case 838: return filename_dir;
		case 839: return filename_drive;
		case 840: return filename_ext;
		case 841: return filename_change_ext;
		case 842: return file_bin_open;
		case 843: return file_bin_rewrite;
		case 844: return file_bin_close;
		case 845: return file_bin_position;
		case 846: return file_bin_size;
		case 847: return file_bin_seek;
		case 848: return file_bin_write_byte;
		case 849: return file_bin_read_byte;
		case 850: return parameter_count;
		case 851: return parameter_string;
		case 852: return environment_get_variable;
		case 853: return ini_open_from_string;
		case 854: return ini_open;
		case 855: return ini_close;
		case 856: return ini_read_string;
		case 857: return ini_read_real;
		case 858: return ini_write_string;
		case 859: return ini_write_real;
		case 860: return ini_key_exists;
		case 861: return ini_section_exists;
		case 862: return ini_key_delete;
		case 863: return ini_section_delete;
		case 864: return ds_set_precision;
		case 865: return ds_exists;
		case 866: return ds_stack_create;
		case 867: return ds_stack_destroy;
		case 868: return ds_stack_clear;
		case 869: return ds_stack_copy;
		case 870: return ds_stack_size;
		case 871: return ds_stack_empty;
		case 872: return ds_stack_push;
		case 873: return ds_stack_pop;
		case 874: return ds_stack_top;
		case 875: return ds_stack_write;
		case 876: return ds_stack_read;
		case 877: return ds_queue_create;
		case 878: return ds_queue_destroy;
		case 879: return ds_queue_clear;
		case 880: return ds_queue_copy;
		case 881: return ds_queue_size;
		case 882: return ds_queue_empty;
		case 883: return ds_queue_enqueue;
		case 884: return ds_queue_dequeue;
		case 885: return ds_queue_head;
		case 886: return ds_queue_tail;
		case 887: return ds_queue_write;
		case 888: return ds_queue_read;
		case 889: return ds_list_create;
		case 890: return ds_list_destroy;
		case 891: return ds_list_clear;
		case 892: return ds_list_copy;
		case 893: return ds_list_size;
		case 894: return ds_list_empty;
		case 895: return ds_list_add;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_896(l_ind) {
	switch (l_ind) {
		case 896: return ds_list_insert;
		case 897: return ds_list_replace;
		case 898: return ds_list_delete;
		case 899: return ds_list_find_index;
		case 900: return ds_list_find_value;
		case 901: return ds_list_is_map;
		case 902: return ds_list_is_list;
		case 903: return ds_list_mark_as_list;
		case 904: return ds_list_mark_as_map;
		case 905: return ds_list_sort;
		case 906: return ds_list_shuffle;
		case 907: return ds_list_write;
		case 908: return ds_list_read;
		case 909: return ds_list_set;
		case 910: return ds_map_create;
		case 911: return ds_map_destroy;
		case 912: return ds_map_clear;
		case 913: return ds_map_copy;
		case 914: return ds_map_size;
		case 915: return ds_map_empty;
		case 916: return ds_map_add;
		case 917: return ds_map_add_list;
		case 918: return ds_map_add_map;
		case 919: return ds_map_replace;
		case 920: return ds_map_replace_map;
		case 921: return ds_map_replace_list;
		case 922: return ds_map_delete;
		case 923: return ds_map_exists;
		case 924: return ds_map_values_to_array;
		case 925: return ds_map_keys_to_array;
		case 926: return ds_map_find_value;
		case 927: return ds_map_is_map;
		case 928: return ds_map_is_list;
		case 929: return ds_map_find_previous;
		case 930: return ds_map_find_next;
		case 931: return ds_map_find_first;
		case 932: return ds_map_find_last;
		case 933: return ds_map_write;
		case 934: return ds_map_read;
		case 935: return ds_map_secure_save;
		case 936: return ds_map_secure_load;
		case 937: return ds_map_secure_load_buffer;
		case 938: return ds_map_secure_save_buffer;
		case 939: return ds_map_set;
		case 940: return ds_priority_create;
		case 941: return ds_priority_destroy;
		case 942: return ds_priority_clear;
		case 943: return ds_priority_copy;
		case 944: return ds_priority_size;
		case 945: return ds_priority_empty;
		case 946: return ds_priority_add;
		case 947: return ds_priority_change_priority;
		case 948: return ds_priority_find_priority;
		case 949: return ds_priority_delete_value;
		case 950: return ds_priority_delete_min;
		case 951: return ds_priority_find_min;
		case 952: return ds_priority_delete_max;
		case 953: return ds_priority_find_max;
		case 954: return ds_priority_write;
		case 955: return ds_priority_read;
		case 956: return ds_grid_create;
		case 957: return ds_grid_destroy;
		case 958: return ds_grid_copy;
		case 959: return ds_grid_resize;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_960(l_ind) {
	switch (l_ind) {
		case 960: return ds_grid_width;
		case 961: return ds_grid_height;
		case 962: return ds_grid_clear;
		case 963: return ds_grid_add;
		case 964: return ds_grid_multiply;
		case 965: return ds_grid_set_region;
		case 966: return ds_grid_add_region;
		case 967: return ds_grid_multiply_region;
		case 968: return ds_grid_set_disk;
		case 969: return ds_grid_add_disk;
		case 970: return ds_grid_multiply_disk;
		case 971: return ds_grid_set_grid_region;
		case 972: return ds_grid_add_grid_region;
		case 973: return ds_grid_multiply_grid_region;
		case 974: return ds_grid_get_sum;
		case 975: return ds_grid_get_max;
		case 976: return ds_grid_get_min;
		case 977: return ds_grid_get_mean;
		case 978: return ds_grid_get_disk_sum;
		case 979: return ds_grid_get_disk_min;
		case 980: return ds_grid_get_disk_max;
		case 981: return ds_grid_get_disk_mean;
		case 982: return ds_grid_value_exists;
		case 983: return ds_grid_value_x;
		case 984: return ds_grid_value_y;
		case 985: return ds_grid_value_disk_exists;
		case 986: return ds_grid_value_disk_x;
		case 987: return ds_grid_value_disk_y;
		case 988: return ds_grid_shuffle;
		case 989: return ds_grid_write;
		case 990: return ds_grid_read;
		case 991: return ds_grid_sort;
		case 992: return ds_grid_set;
		case 993: return ds_grid_get;
		case 994: return effect_create_below;
		case 995: return effect_create_above;
		case 996: return effect_clear;
		case 997: return part_type_create;
		case 998: return part_type_destroy;
		case 999: return part_type_exists;
		case 1000: return part_type_clear;
		case 1001: return part_type_shape;
		case 1002: return part_type_sprite;
		case 1003: return part_type_size;
		case 1004: return part_type_scale;
		case 1005: return part_type_orientation;
		case 1006: return part_type_life;
		case 1007: return part_type_step;
		case 1008: return part_type_death;
		case 1009: return part_type_speed;
		case 1010: return part_type_direction;
		case 1011: return part_type_gravity;
		case 1012: return part_type_colour1;
		case 1013: return part_type_colour2;
		case 1014: return part_type_colour3;
		case 1015: return part_type_colour_mix;
		case 1016: return part_type_colour_rgb;
		case 1017: return part_type_colour_hsv;
		case 1018: return part_type_color1;
		case 1019: return part_type_color2;
		case 1020: return part_type_color3;
		case 1021: return part_type_color_mix;
		case 1022: return part_type_color_rgb;
		case 1023: return part_type_color_hsv;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1024(l_ind) {
	switch (l_ind) {
		case 1024: return part_type_alpha1;
		case 1025: return part_type_alpha2;
		case 1026: return part_type_alpha3;
		case 1027: return part_type_blend;
		case 1028: return part_system_create;
		case 1029: return part_system_create_layer;
		case 1030: return part_system_destroy;
		case 1031: return part_system_exists;
		case 1032: return part_system_clear;
		case 1033: return part_system_draw_order;
		case 1034: return part_system_depth;
		case 1035: return part_system_position;
		case 1036: return part_system_automatic_update;
		case 1037: return part_system_automatic_draw;
		case 1038: return part_system_update;
		case 1039: return part_system_drawit;
		case 1040: return part_system_get_layer;
		case 1041: return part_system_layer;
		case 1042: return part_particles_create;
		case 1043: return part_particles_create_colour;
		case 1044: return part_particles_create_color;
		case 1045: return part_particles_clear;
		case 1046: return part_particles_count;
		case 1047: return part_emitter_create;
		case 1048: return part_emitter_destroy;
		case 1049: return part_emitter_destroy_all;
		case 1050: return part_emitter_exists;
		case 1051: return part_emitter_clear;
		case 1052: return part_emitter_region;
		case 1053: return part_emitter_burst;
		case 1054: return part_emitter_stream;
		case 1055: return window_handle;
		case 1056: return window_device;
		case 1057: return matrix_get;
		case 1058: return matrix_set;
		case 1059: return matrix_build_identity;
		case 1060: return matrix_build;
		case 1061: return matrix_build_lookat;
		case 1062: return matrix_build_projection_ortho;
		case 1063: return matrix_build_projection_perspective;
		case 1064: return matrix_build_projection_perspective_fov;
		case 1065: return matrix_multiply;
		case 1066: return matrix_transform_vertex;
		case 1067: return matrix_stack_push;
		case 1068: return matrix_stack_pop;
		case 1069: return matrix_stack_set;
		case 1070: return matrix_stack_clear;
		case 1071: return matrix_stack_top;
		case 1072: return matrix_stack_is_empty;
		case 1073: return browser_input_capture;
		case 1074: return os_get_config;
		case 1075: return os_get_info;
		case 1076: return os_get_language;
		case 1077: return os_get_region;
		case 1078: return os_check_permission;
		case 1079: return os_request_permission;
		case 1080: return os_lock_orientation;
		case 1081: return os_set_orientation_lock;
		case 1082: return display_get_dpi_x;
		case 1083: return display_get_dpi_y;
		case 1084: return display_set_gui_size;
		case 1085: return display_set_gui_maximise;
		case 1086: return display_set_gui_maximize;
		case 1087: return device_mouse_dbclick_enable;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1088(l_ind) {
	switch (l_ind) {
		case 1088: return display_set_timing_method;
		case 1089: return display_get_timing_method;
		case 1090: return display_set_sleep_margin;
		case 1091: return display_get_sleep_margin;
		case 1092: return virtual_key_add;
		case 1093: return virtual_key_hide;
		case 1094: return virtual_key_delete;
		case 1095: return virtual_key_show;
		case 1096: return draw_enable_drawevent;
		case 1097: return draw_texture_flush;
		case 1098: return draw_flush;
		case 1099: return gpu_set_blendenable;
		case 1100: return gpu_set_ztestenable;
		case 1101: return gpu_set_zfunc;
		case 1102: return gpu_set_zwriteenable;
		case 1103: return gpu_set_fog;
		case 1104: return gpu_set_cullmode;
		case 1105: return gpu_set_blendmode;
		case 1106: return gpu_set_blendmode_ext;
		case 1107: return gpu_set_blendmode_ext_sepalpha;
		case 1108: return gpu_set_colorwriteenable;
		case 1109: return gpu_set_colourwriteenable;
		case 1110: return gpu_set_alphatestenable;
		case 1111: return gpu_set_alphatestref;
		case 1112: return gpu_set_texfilter;
		case 1113: return gpu_set_texfilter_ext;
		case 1114: return gpu_set_texrepeat;
		case 1115: return gpu_set_texrepeat_ext;
		case 1116: return gpu_set_tex_filter;
		case 1117: return gpu_set_tex_filter_ext;
		case 1118: return gpu_set_tex_repeat;
		case 1119: return gpu_set_tex_repeat_ext;
		case 1120: return gpu_set_tex_mip_filter;
		case 1121: return gpu_set_tex_mip_filter_ext;
		case 1122: return gpu_set_tex_mip_bias;
		case 1123: return gpu_set_tex_mip_bias_ext;
		case 1124: return gpu_set_tex_min_mip;
		case 1125: return gpu_set_tex_min_mip_ext;
		case 1126: return gpu_set_tex_max_mip;
		case 1127: return gpu_set_tex_max_mip_ext;
		case 1128: return gpu_set_tex_max_aniso;
		case 1129: return gpu_set_tex_max_aniso_ext;
		case 1130: return gpu_set_tex_mip_enable;
		case 1131: return gpu_set_tex_mip_enable_ext;
		case 1132: return gpu_get_blendenable;
		case 1133: return gpu_get_ztestenable;
		case 1134: return gpu_get_zfunc;
		case 1135: return gpu_get_zwriteenable;
		case 1136: return gpu_get_fog;
		case 1137: return gpu_get_cullmode;
		case 1138: return gpu_get_blendmode;
		case 1139: return gpu_get_blendmode_ext;
		case 1140: return gpu_get_blendmode_ext_sepalpha;
		case 1141: return gpu_get_blendmode_src;
		case 1142: return gpu_get_blendmode_dest;
		case 1143: return gpu_get_blendmode_srcalpha;
		case 1144: return gpu_get_blendmode_destalpha;
		case 1145: return gpu_get_colorwriteenable;
		case 1146: return gpu_get_colourwriteenable;
		case 1147: return gpu_get_alphatestenable;
		case 1148: return gpu_get_alphatestref;
		case 1149: return gpu_get_texfilter;
		case 1150: return gpu_get_texfilter_ext;
		case 1151: return gpu_get_texrepeat;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1152(l_ind) {
	switch (l_ind) {
		case 1152: return gpu_get_texrepeat_ext;
		case 1153: return gpu_get_tex_filter;
		case 1154: return gpu_get_tex_filter_ext;
		case 1155: return gpu_get_tex_repeat;
		case 1156: return gpu_get_tex_repeat_ext;
		case 1157: return gpu_get_tex_mip_filter;
		case 1158: return gpu_get_tex_mip_filter_ext;
		case 1159: return gpu_get_tex_mip_bias;
		case 1160: return gpu_get_tex_mip_bias_ext;
		case 1161: return gpu_get_tex_min_mip;
		case 1162: return gpu_get_tex_min_mip_ext;
		case 1163: return gpu_get_tex_max_mip;
		case 1164: return gpu_get_tex_max_mip_ext;
		case 1165: return gpu_get_tex_max_aniso;
		case 1166: return gpu_get_tex_max_aniso_ext;
		case 1167: return gpu_get_tex_mip_enable;
		case 1168: return gpu_get_tex_mip_enable_ext;
		case 1169: return gpu_push_state;
		case 1170: return gpu_pop_state;
		case 1171: return gpu_get_state;
		case 1172: return gpu_set_state;
		case 1173: return draw_light_define_ambient;
		case 1174: return draw_light_define_direction;
		case 1175: return draw_light_define_point;
		case 1176: return draw_light_enable;
		case 1177: return draw_set_lighting;
		case 1178: return draw_light_get_ambient;
		case 1179: return draw_light_get;
		case 1180: return draw_get_lighting;
		case 1181: return shop_leave_rating;
		case 1182: return url_get_domain;
		case 1183: return url_open;
		case 1184: return url_open_ext;
		case 1185: return url_open_full;
		case 1186: return get_timer;
		case 1187: return device_get_tilt_x;
		case 1188: return device_get_tilt_y;
		case 1189: return device_get_tilt_z;
		case 1190: return device_is_keypad_open;
		case 1191: return device_mouse_check_button;
		case 1192: return device_mouse_check_button_pressed;
		case 1193: return device_mouse_check_button_released;
		case 1194: return device_mouse_x;
		case 1195: return device_mouse_y;
		case 1196: return device_mouse_raw_x;
		case 1197: return device_mouse_raw_y;
		case 1198: return device_mouse_x_to_gui;
		case 1199: return device_mouse_y_to_gui;
		case 1200: return gamepad_is_supported;
		case 1201: return gamepad_get_device_count;
		case 1202: return gamepad_is_connected;
		case 1203: return gamepad_get_description;
		case 1204: return gamepad_get_button_threshold;
		case 1205: return gamepad_set_button_threshold;
		case 1206: return gamepad_get_axis_deadzone;
		case 1207: return gamepad_set_axis_deadzone;
		case 1208: return gamepad_button_count;
		case 1209: return gamepad_button_check;
		case 1210: return gamepad_button_check_pressed;
		case 1211: return gamepad_button_check_released;
		case 1212: return gamepad_button_value;
		case 1213: return gamepad_axis_count;
		case 1214: return gamepad_axis_value;
		case 1215: return gamepad_set_vibration;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1216(l_ind) {
	switch (l_ind) {
		case 1216: return gamepad_set_colour;
		case 1217: return gamepad_set_color;
		case 1218: return gamepad_hat_count;
		case 1219: return gamepad_hat_value;
		case 1220: return gamepad_remove_mapping;
		case 1221: return gamepad_test_mapping;
		case 1222: return gamepad_get_mapping;
		case 1223: return gamepad_get_guid;
		case 1224: return gamepad_set_option;
		case 1225: return gamepad_get_option;
		case 1226: return os_is_paused;
		case 1227: return window_has_focus;
		case 1228: return code_is_compiled;
		case 1229: return http_get;
		case 1230: return http_get_file;
		case 1231: return http_post_string;
		case 1232: return http_request;
		case 1233: return http_get_request_crossorigin;
		case 1234: return http_set_request_crossorigin;
		case 1235: return json_encode;
		case 1236: return json_decode;
		case 1237: return json_stringify;
		case 1238: return json_parse;
		case 1239: return zip_unzip;
		case 1240: return load_csv;
		case 1241: return base64_encode;
		case 1242: return base64_decode;
		case 1243: return md5_string_unicode;
		case 1244: return md5_string_utf8;
		case 1245: return md5_file;
		case 1246: return os_is_network_connected;
		case 1247: return sha1_string_unicode;
		case 1248: return sha1_string_utf8;
		case 1249: return sha1_file;
		case 1250: return os_powersave_enable;
		case 1251: return uwp_livetile_tile_clear;
		case 1252: return uwp_livetile_badge_notification;
		case 1253: return uwp_livetile_badge_clear;
		case 1254: return uwp_livetile_queue_enable;
		case 1255: return uwp_secondarytile_pin;
		case 1256: return uwp_secondarytile_badge_notification;
		case 1257: return uwp_secondarytile_delete;
		case 1258: return uwp_secondarytile_badge_clear;
		case 1259: return uwp_secondarytile_tile_clear;
		case 1260: return uwp_livetile_notification_begin;
		case 1261: return uwp_livetile_notification_secondary_begin;
		case 1262: return uwp_livetile_notification_expiry;
		case 1263: return uwp_livetile_notification_tag;
		case 1264: return uwp_livetile_notification_text_add;
		case 1265: return uwp_livetile_notification_image_add;
		case 1266: return uwp_livetile_notification_end;
		case 1267: return uwp_livetile_notification_template_add;
		case 1268: return uwp_device_touchscreen_available;
		case 1269: return physics_world_create;
		case 1270: return physics_world_gravity;
		case 1271: return physics_world_update_speed;
		case 1272: return physics_world_update_iterations;
		case 1273: return physics_world_draw_debug;
		case 1274: return physics_pause_enable;
		case 1275: return physics_fixture_create;
		case 1276: return physics_fixture_set_kinematic;
		case 1277: return physics_fixture_set_density;
		case 1278: return physics_fixture_set_awake;
		case 1279: return physics_fixture_set_restitution;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1280(l_ind) {
	switch (l_ind) {
		case 1280: return physics_fixture_set_friction;
		case 1281: return physics_fixture_set_collision_group;
		case 1282: return physics_fixture_set_sensor;
		case 1283: return physics_fixture_set_linear_damping;
		case 1284: return physics_fixture_set_angular_damping;
		case 1285: return physics_fixture_set_circle_shape;
		case 1286: return physics_fixture_set_box_shape;
		case 1287: return physics_fixture_set_edge_shape;
		case 1288: return physics_fixture_set_polygon_shape;
		case 1289: return physics_fixture_set_chain_shape;
		case 1290: return physics_fixture_add_point;
		case 1291: return physics_fixture_bind;
		case 1292: return physics_fixture_bind_ext;
		case 1293: return physics_fixture_delete;
		case 1294: return physics_apply_force;
		case 1295: return physics_apply_impulse;
		case 1296: return physics_apply_angular_impulse;
		case 1297: return physics_apply_local_force;
		case 1298: return physics_apply_local_impulse;
		case 1299: return physics_apply_torque;
		case 1300: return physics_mass_properties;
		case 1301: return physics_draw_debug;
		case 1302: return physics_test_overlap;
		case 1303: return physics_remove_fixture;
		case 1304: return physics_set_friction;
		case 1305: return physics_set_density;
		case 1306: return physics_set_restitution;
		case 1307: return physics_get_friction;
		case 1308: return physics_get_density;
		case 1309: return physics_get_restitution;
		case 1310: return physics_joint_distance_create;
		case 1311: return physics_joint_rope_create;
		case 1312: return physics_joint_revolute_create;
		case 1313: return physics_joint_prismatic_create;
		case 1314: return physics_joint_pulley_create;
		case 1315: return physics_joint_wheel_create;
		case 1316: return physics_joint_weld_create;
		case 1317: return physics_joint_friction_create;
		case 1318: return physics_joint_gear_create;
		case 1319: return physics_joint_enable_motor;
		case 1320: return physics_joint_get_value;
		case 1321: return physics_joint_set_value;
		case 1322: return physics_joint_delete;
		case 1323: return physics_particle_create;
		case 1324: return physics_particle_delete;
		case 1325: return physics_particle_delete_region_circle;
		case 1326: return physics_particle_delete_region_box;
		case 1327: return physics_particle_delete_region_poly;
		case 1328: return physics_particle_set_flags;
		case 1329: return physics_particle_set_category_flags;
		case 1330: return physics_particle_draw;
		case 1331: return physics_particle_draw_ext;
		case 1332: return physics_particle_count;
		case 1333: return physics_particle_get_data;
		case 1334: return physics_particle_get_data_particle;
		case 1335: return physics_particle_group_begin;
		case 1336: return physics_particle_group_circle;
		case 1337: return physics_particle_group_box;
		case 1338: return physics_particle_group_polygon;
		case 1339: return physics_particle_group_add_point;
		case 1340: return physics_particle_group_end;
		case 1341: return physics_particle_group_join;
		case 1342: return physics_particle_group_delete;
		case 1343: return physics_particle_group_count;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1344(l_ind) {
	switch (l_ind) {
		case 1344: return physics_particle_group_get_data;
		case 1345: return physics_particle_group_get_mass;
		case 1346: return physics_particle_group_get_inertia;
		case 1347: return physics_particle_group_get_centre_x;
		case 1348: return physics_particle_group_get_centre_y;
		case 1349: return physics_particle_group_get_vel_x;
		case 1350: return physics_particle_group_get_vel_y;
		case 1351: return physics_particle_group_get_ang_vel;
		case 1352: return physics_particle_group_get_x;
		case 1353: return physics_particle_group_get_y;
		case 1354: return physics_particle_group_get_angle;
		case 1355: return physics_particle_set_group_flags;
		case 1356: return physics_particle_get_group_flags;
		case 1357: return physics_particle_get_max_count;
		case 1358: return physics_particle_get_radius;
		case 1359: return physics_particle_get_density;
		case 1360: return physics_particle_get_damping;
		case 1361: return physics_particle_get_gravity_scale;
		case 1362: return physics_particle_set_max_count;
		case 1363: return physics_particle_set_radius;
		case 1364: return physics_particle_set_density;
		case 1365: return physics_particle_set_damping;
		case 1366: return physics_particle_set_gravity_scale;
		case 1367: return network_create_socket;
		case 1368: return network_create_socket_ext;
		case 1369: return network_create_server;
		case 1370: return network_create_server_raw;
		case 1371: return network_connect;
		case 1372: return network_connect_raw;
		case 1373: return network_connect_async;
		case 1374: return network_connect_raw_async;
		case 1375: return network_send_packet;
		case 1376: return network_send_raw;
		case 1377: return network_send_broadcast;
		case 1378: return network_send_udp;
		case 1379: return network_send_udp_raw;
		case 1380: return network_set_timeout;
		case 1381: return network_set_config;
		case 1382: return network_resolve;
		case 1383: return network_destroy;
		case 1384: return buffer_create;
		case 1385: return buffer_write;
		case 1386: return buffer_read;
		case 1387: return buffer_seek;
		case 1388: return buffer_get_surface;
		case 1389: return buffer_set_surface;
		case 1390: return buffer_set_used_size;
		case 1391: return buffer_delete;
		case 1392: return buffer_exists;
		case 1393: return buffer_get_type;
		case 1394: return buffer_get_alignment;
		case 1395: return buffer_poke;
		case 1396: return buffer_peek;
		case 1397: return buffer_save;
		case 1398: return buffer_save_ext;
		case 1399: return buffer_load;
		case 1400: return buffer_load_ext;
		case 1401: return buffer_load_partial;
		case 1402: return buffer_copy;
		case 1403: return buffer_fill;
		case 1404: return buffer_get_size;
		case 1405: return buffer_tell;
		case 1406: return buffer_resize;
		case 1407: return buffer_md5;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1408(l_ind) {
	switch (l_ind) {
		case 1408: return buffer_sha1;
		case 1409: return buffer_crc32;
		case 1410: return buffer_base64_encode;
		case 1411: return buffer_base64_decode;
		case 1412: return buffer_base64_decode_ext;
		case 1413: return buffer_sizeof;
		case 1414: return buffer_get_address;
		case 1415: return buffer_create_from_vertex_buffer;
		case 1416: return buffer_create_from_vertex_buffer_ext;
		case 1417: return buffer_copy_from_vertex_buffer;
		case 1418: return buffer_async_group_begin;
		case 1419: return buffer_async_group_option;
		case 1420: return buffer_async_group_end;
		case 1421: return buffer_load_async;
		case 1422: return buffer_save_async;
		case 1423: return buffer_compress;
		case 1424: return buffer_decompress;
		case 1425: return gml_release_mode;
		case 1426: return shader_set;
		case 1427: return shader_get_name;
		case 1428: return shader_reset;
		case 1429: return shader_current;
		case 1430: return shader_is_compiled;
		case 1431: return shader_get_sampler_index;
		case 1432: return shader_get_uniform;
		case 1433: return shader_set_uniform_i;
		case 1434: return shader_set_uniform_i_array;
		case 1435: return shader_set_uniform_f;
		case 1436: return shader_set_uniform_f_array;
		case 1437: return shader_set_uniform_f_buffer;
		case 1438: return shader_set_uniform_matrix;
		case 1439: return shader_set_uniform_matrix_array;
		case 1440: return shader_enable_corner_id;
		case 1441: return texture_set_stage;
		case 1442: return texture_get_texel_width;
		case 1443: return texture_get_texel_height;
		case 1444: return shaders_are_supported;
		case 1445: return vertex_format_begin;
		case 1446: return vertex_format_end;
		case 1447: return vertex_format_delete;
		case 1448: return vertex_format_add_position;
		case 1449: return vertex_format_add_position_3d;
		case 1450: return vertex_format_add_colour;
		case 1451: return vertex_format_add_color;
		case 1452: return vertex_format_add_normal;
		case 1453: return vertex_format_add_texcoord;
		case 1454: return vertex_format_add_custom;
		case 1455: return vertex_create_buffer;
		case 1456: return vertex_create_buffer_ext;
		case 1457: return vertex_delete_buffer;
		case 1458: return vertex_begin;
		case 1459: return vertex_end;
		case 1460: return vertex_position;
		case 1461: return vertex_position_3d;
		case 1462: return vertex_colour;
		case 1463: return vertex_color;
		case 1464: return vertex_argb;
		case 1465: return vertex_texcoord;
		case 1466: return vertex_normal;
		case 1467: return vertex_float1;
		case 1468: return vertex_float2;
		case 1469: return vertex_float3;
		case 1470: return vertex_float4;
		case 1471: return vertex_ubyte4;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1472(l_ind) {
	switch (l_ind) {
		case 1472: return vertex_submit;
		case 1473: return vertex_freeze;
		case 1474: return vertex_get_number;
		case 1475: return vertex_get_buffer_size;
		case 1476: return vertex_create_buffer_from_buffer;
		case 1477: return vertex_create_buffer_from_buffer_ext;
		case 1478: return skeleton_animation_set;
		case 1479: return skeleton_animation_get;
		case 1480: return skeleton_animation_mix;
		case 1481: return skeleton_animation_set_ext;
		case 1482: return skeleton_animation_get_ext;
		case 1483: return skeleton_animation_get_duration;
		case 1484: return skeleton_animation_get_frames;
		case 1485: return skeleton_animation_clear;
		case 1486: return skeleton_skin_set;
		case 1487: return skeleton_skin_get;
		case 1488: return skeleton_skin_create;
		case 1489: return skeleton_attachment_set;
		case 1490: return skeleton_attachment_get;
		case 1491: return skeleton_attachment_create;
		case 1492: return skeleton_attachment_create_colour;
		case 1493: return skeleton_attachment_create_color;
		case 1494: return skeleton_attachment_exists;
		case 1495: return skeleton_attachment_replace;
		case 1496: return skeleton_attachment_replace_colour;
		case 1497: return skeleton_attachment_replace_color;
		case 1498: return skeleton_attachment_destroy;
		case 1499: return skeleton_collision_draw_set;
		case 1500: return skeleton_bone_data_get;
		case 1501: return skeleton_bone_data_set;
		case 1502: return skeleton_bone_state_get;
		case 1503: return skeleton_bone_state_set;
		case 1504: return skeleton_slot_colour_set;
		case 1505: return skeleton_slot_color_set;
		case 1506: return skeleton_slot_colour_get;
		case 1507: return skeleton_slot_color_get;
		case 1508: return skeleton_slot_alpha_get;
		case 1509: return skeleton_find_slot;
		case 1510: return skeleton_get_minmax;
		case 1511: return skeleton_get_num_bounds;
		case 1512: return skeleton_get_bounds;
		case 1513: return skeleton_animation_get_frame;
		case 1514: return skeleton_animation_set_frame;
		case 1515: return skeleton_animation_get_position;
		case 1516: return skeleton_animation_set_position;
		case 1517: return skeleton_animation_get_event_frames;
		case 1518: return skeleton_animation_is_looping;
		case 1519: return skeleton_animation_is_finished;
		case 1520: return draw_skeleton;
		case 1521: return draw_skeleton_time;
		case 1522: return draw_skeleton_instance;
		case 1523: return draw_skeleton_collision;
		case 1524: return draw_enable_skeleton_blendmodes;
		case 1525: return draw_get_enable_skeleton_blendmodes;
		case 1526: return skeleton_animation_list;
		case 1527: return skeleton_skin_list;
		case 1528: return skeleton_bone_list;
		case 1529: return skeleton_slot_list;
		case 1530: return skeleton_slot_data;
		case 1531: return skeleton_slot_data_instance;
		case 1532: return layer_get_id;
		case 1533: return layer_get_id_at_depth;
		case 1534: return layer_get_depth;
		case 1535: return layer_create;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1536(l_ind) {
	switch (l_ind) {
		case 1536: return layer_destroy;
		case 1537: return layer_destroy_instances;
		case 1538: return layer_add_instance;
		case 1539: return layer_has_instance;
		case 1540: return layer_set_visible;
		case 1541: return layer_get_visible;
		case 1542: return layer_exists;
		case 1543: return layer_x;
		case 1544: return layer_y;
		case 1545: return layer_get_x;
		case 1546: return layer_get_y;
		case 1547: return layer_hspeed;
		case 1548: return layer_vspeed;
		case 1549: return layer_get_hspeed;
		case 1550: return layer_get_vspeed;
		case 1551: return layer_script_begin;
		case 1552: return layer_script_end;
		case 1553: return layer_shader;
		case 1554: return layer_get_script_begin;
		case 1555: return layer_get_script_end;
		case 1556: return layer_get_shader;
		case 1557: return layer_set_target_room;
		case 1558: return layer_get_target_room;
		case 1559: return layer_reset_target_room;
		case 1560: return layer_get_all;
		case 1561: return layer_get_all_elements;
		case 1562: return layer_get_name;
		case 1563: return layer_depth;
		case 1564: return layer_get_element_layer;
		case 1565: return layer_get_element_type;
		case 1566: return layer_element_move;
		case 1567: return layer_force_draw_depth;
		case 1568: return layer_is_draw_depth_forced;
		case 1569: return layer_get_forced_depth;
		case 1570: return layer_background_get_id;
		case 1571: return layer_background_exists;
		case 1572: return layer_background_create;
		case 1573: return layer_background_destroy;
		case 1574: return layer_background_visible;
		case 1575: return layer_background_change;
		case 1576: return layer_background_sprite;
		case 1577: return layer_background_htiled;
		case 1578: return layer_background_vtiled;
		case 1579: return layer_background_stretch;
		case 1580: return layer_background_yscale;
		case 1581: return layer_background_xscale;
		case 1582: return layer_background_blend;
		case 1583: return layer_background_alpha;
		case 1584: return layer_background_index;
		case 1585: return layer_background_speed;
		case 1586: return layer_background_get_visible;
		case 1587: return layer_background_get_sprite;
		case 1588: return layer_background_get_htiled;
		case 1589: return layer_background_get_vtiled;
		case 1590: return layer_background_get_stretch;
		case 1591: return layer_background_get_yscale;
		case 1592: return layer_background_get_xscale;
		case 1593: return layer_background_get_blend;
		case 1594: return layer_background_get_alpha;
		case 1595: return layer_background_get_index;
		case 1596: return layer_background_get_speed;
		case 1597: return layer_sprite_get_id;
		case 1598: return layer_sprite_exists;
		case 1599: return layer_sprite_create;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1600(l_ind) {
	switch (l_ind) {
		case 1600: return layer_sprite_destroy;
		case 1601: return layer_sprite_change;
		case 1602: return layer_sprite_index;
		case 1603: return layer_sprite_speed;
		case 1604: return layer_sprite_xscale;
		case 1605: return layer_sprite_yscale;
		case 1606: return layer_sprite_angle;
		case 1607: return layer_sprite_blend;
		case 1608: return layer_sprite_alpha;
		case 1609: return layer_sprite_x;
		case 1610: return layer_sprite_y;
		case 1611: return layer_sprite_get_sprite;
		case 1612: return layer_sprite_get_index;
		case 1613: return layer_sprite_get_speed;
		case 1614: return layer_sprite_get_xscale;
		case 1615: return layer_sprite_get_yscale;
		case 1616: return layer_sprite_get_angle;
		case 1617: return layer_sprite_get_blend;
		case 1618: return layer_sprite_get_alpha;
		case 1619: return layer_sprite_get_x;
		case 1620: return layer_sprite_get_y;
		case 1621: return layer_tilemap_get_id;
		case 1622: return layer_tilemap_exists;
		case 1623: return layer_tilemap_create;
		case 1624: return layer_tilemap_destroy;
		case 1625: return tilemap_tileset;
		case 1626: return tilemap_x;
		case 1627: return tilemap_y;
		case 1628: return tilemap_set;
		case 1629: return tilemap_set_at_pixel;
		case 1630: return tileset_get_texture;
		case 1631: return tileset_get_uvs;
		case 1632: return tileset_get_name;
		case 1633: return tilemap_get_tileset;
		case 1634: return tilemap_get_tile_width;
		case 1635: return tilemap_get_tile_height;
		case 1636: return tilemap_get_width;
		case 1637: return tilemap_get_height;
		case 1638: return tilemap_set_width;
		case 1639: return tilemap_set_height;
		case 1640: return tilemap_get_x;
		case 1641: return tilemap_get_y;
		case 1642: return tilemap_get;
		case 1643: return tilemap_get_at_pixel;
		case 1644: return tilemap_get_cell_x_at_pixel;
		case 1645: return tilemap_get_cell_y_at_pixel;
		case 1646: return tilemap_clear;
		case 1647: return draw_tilemap;
		case 1648: return draw_tile;
		case 1649: return tilemap_set_global_mask;
		case 1650: return tilemap_get_global_mask;
		case 1651: return tilemap_set_mask;
		case 1652: return tilemap_get_mask;
		case 1653: return tilemap_get_frame;
		case 1654: return tile_set_empty;
		case 1655: return tile_set_index;
		case 1656: return tile_set_flip;
		case 1657: return tile_set_mirror;
		case 1658: return tile_set_rotate;
		case 1659: return tile_get_empty;
		case 1660: return tile_get_index;
		case 1661: return tile_get_flip;
		case 1662: return tile_get_mirror;
		case 1663: return tile_get_rotate;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1664(l_ind) {
	switch (l_ind) {
		case 1664: return layer_tile_exists;
		case 1665: return layer_tile_create;
		case 1666: return layer_tile_destroy;
		case 1667: return layer_tile_change;
		case 1668: return layer_tile_xscale;
		case 1669: return layer_tile_yscale;
		case 1670: return layer_tile_blend;
		case 1671: return layer_tile_alpha;
		case 1672: return layer_tile_x;
		case 1673: return layer_tile_y;
		case 1674: return layer_tile_region;
		case 1675: return layer_tile_visible;
		case 1676: return layer_tile_get_sprite;
		case 1677: return layer_tile_get_xscale;
		case 1678: return layer_tile_get_yscale;
		case 1679: return layer_tile_get_blend;
		case 1680: return layer_tile_get_alpha;
		case 1681: return layer_tile_get_x;
		case 1682: return layer_tile_get_y;
		case 1683: return layer_tile_get_region;
		case 1684: return layer_tile_get_visible;
		case 1685: return layer_instance_get_instance;
		case 1686: return instance_activate_layer;
		case 1687: return instance_deactivate_layer;
		case 1688: return camera_create;
		case 1689: return camera_create_view;
		case 1690: return camera_destroy;
		case 1691: return camera_apply;
		case 1692: return camera_get_active;
		case 1693: return camera_get_default;
		case 1694: return camera_set_default;
		case 1695: return camera_set_view_mat;
		case 1696: return camera_set_proj_mat;
		case 1697: return camera_set_update_script;
		case 1698: return camera_set_begin_script;
		case 1699: return camera_set_end_script;
		case 1700: return camera_set_view_pos;
		case 1701: return camera_set_view_size;
		case 1702: return camera_set_view_speed;
		case 1703: return camera_set_view_border;
		case 1704: return camera_set_view_angle;
		case 1705: return camera_set_view_target;
		case 1706: return camera_get_view_mat;
		case 1707: return camera_get_proj_mat;
		case 1708: return camera_get_update_script;
		case 1709: return camera_get_begin_script;
		case 1710: return camera_get_end_script;
		case 1711: return camera_get_view_x;
		case 1712: return camera_get_view_y;
		case 1713: return camera_get_view_width;
		case 1714: return camera_get_view_height;
		case 1715: return camera_get_view_speed_x;
		case 1716: return camera_get_view_speed_y;
		case 1717: return camera_get_view_border_x;
		case 1718: return camera_get_view_border_y;
		case 1719: return camera_get_view_angle;
		case 1720: return camera_get_view_target;
		case 1721: return view_get_camera;
		case 1722: return view_get_visible;
		case 1723: return view_get_xport;
		case 1724: return view_get_yport;
		case 1725: return view_get_wport;
		case 1726: return view_get_hport;
		case 1727: return view_get_surface_id;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1728(l_ind) {
	switch (l_ind) {
		case 1728: return view_set_camera;
		case 1729: return view_set_visible;
		case 1730: return view_set_xport;
		case 1731: return view_set_yport;
		case 1732: return view_set_wport;
		case 1733: return view_set_hport;
		case 1734: return view_set_surface_id;
		case 1735: return gesture_drag_time;
		case 1736: return gesture_drag_distance;
		case 1737: return gesture_flick_speed;
		case 1738: return gesture_double_tap_time;
		case 1739: return gesture_double_tap_distance;
		case 1740: return gesture_pinch_distance;
		case 1741: return gesture_pinch_angle_towards;
		case 1742: return gesture_pinch_angle_away;
		case 1743: return gesture_rotate_time;
		case 1744: return gesture_rotate_angle;
		case 1745: return gesture_tap_count;
		case 1746: return gesture_get_drag_time;
		case 1747: return gesture_get_drag_distance;
		case 1748: return gesture_get_flick_speed;
		case 1749: return gesture_get_double_tap_time;
		case 1750: return gesture_get_double_tap_distance;
		case 1751: return gesture_get_pinch_distance;
		case 1752: return gesture_get_pinch_angle_towards;
		case 1753: return gesture_get_pinch_angle_away;
		case 1754: return gesture_get_rotate_time;
		case 1755: return gesture_get_rotate_angle;
		case 1756: return gesture_get_tap_count;
		case 1757: return keyboard_virtual_show;
		case 1758: return keyboard_virtual_hide;
		case 1759: return keyboard_virtual_status;
		case 1760: return keyboard_virtual_height;
		case 1761: return tag_get_asset_ids;
		case 1762: return tag_get_assets;
		case 1763: return asset_get_tags;
		case 1764: return asset_add_tags;
		case 1765: return asset_remove_tags;
		case 1766: return asset_has_tags;
		case 1767: return asset_has_any_tag;
		case 1768: return asset_clear_tags;
		case 1769: return extension_exists;
		case 1770: return extension_get_option_count;
		case 1771: return extension_get_option_names;
		case 1772: return extension_get_option_value;
		case 1773: return extension_get_options;
		case 1774: return layer_sequence_get_instance;
		case 1775: return layer_sequence_create;
		case 1776: return layer_sequence_destroy;
		case 1777: return layer_sequence_exists;
		case 1778: return layer_sequence_x;
		case 1779: return layer_sequence_y;
		case 1780: return layer_sequence_angle;
		case 1781: return layer_sequence_xscale;
		case 1782: return layer_sequence_yscale;
		case 1783: return layer_sequence_headpos;
		case 1784: return layer_sequence_headdir;
		case 1785: return layer_sequence_pause;
		case 1786: return layer_sequence_play;
		case 1787: return layer_sequence_speedscale;
		case 1788: return layer_sequence_get_x;
		case 1789: return layer_sequence_get_y;
		case 1790: return layer_sequence_get_angle;
		case 1791: return layer_sequence_get_xscale;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1792(l_ind) {
	switch (l_ind) {
		case 1792: return layer_sequence_get_yscale;
		case 1793: return layer_sequence_get_headpos;
		case 1794: return layer_sequence_get_headdir;
		case 1795: return layer_sequence_get_sequence;
		case 1796: return layer_sequence_is_paused;
		case 1797: return layer_sequence_is_finished;
		case 1798: return layer_sequence_get_speedscale;
		case 1799: return layer_sequence_get_length;
		case 1800: return animcurve_get;
		case 1801: return animcurve_get_channel;
		case 1802: return animcurve_get_channel_index;
		case 1803: return animcurve_channel_evaluate;
		case 1804: return sequence_create;
		case 1805: return sequence_destroy;
		case 1806: return sequence_exists;
		case 1807: return sequence_get;
		case 1808: return sequence_keyframe_new;
		case 1809: return sequence_keyframedata_new;
		case 1810: return sequence_track_new;
		case 1811: return sequence_get_objects;
		case 1812: return sequence_instance_override_object;
		case 1813: return animcurve_create;
		case 1814: return animcurve_destroy;
		case 1815: return animcurve_exists;
		case 1816: return animcurve_channel_new;
		case 1817: return animcurve_point_new;
		case 1818: return fx_create;
		case 1819: return fx_get_name;
		case 1820: return fx_get_parameter_names;
		case 1821: return fx_get_parameter;
		case 1822: return fx_get_parameters;
		case 1823: return fx_get_single_layer;
		case 1824: return fx_set_parameter;
		case 1825: return fx_set_parameters;
		case 1826: return fx_set_single_layer;
		case 1827: return layer_set_fx;
		case 1828: return layer_get_fx;
		case 1829: return layer_clear_fx;
		case 1830: return layer_enable_fx;
		case 1831: return layer_fx_is_enabled;
		case 1832: return gc_collect;
		case 1833: return gc_enable;
		case 1834: return gc_is_enabled;
		case 1835: return gc_get_stats;
		case 1836: return gc_target_frame_time;
		case 1837: return gc_get_target_frame_time;
		case 1838: return weak_ref_create;
		case 1839: return weak_ref_alive;
		case 1840: return weak_ref_any_alive;
		case 1841: return time_source_create;
		case 1842: return time_source_destroy;
		case 1843: return time_source_start;
		case 1844: return time_source_stop;
		case 1845: return time_source_pause;
		case 1846: return time_source_resume;
		case 1847: return time_source_reset;
		case 1848: return time_source_reconfigure;
		case 1849: return time_source_get_period;
		case 1850: return time_source_get_reps_completed;
		case 1851: return time_source_get_reps_remaining;
		case 1852: return time_source_get_units;
		case 1853: return time_source_get_time_remaining;
		case 1854: return time_source_get_state;
		case 1855: return time_source_get_parent;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func_1856(l_ind) {
	switch (l_ind) {
		case 1856: return time_source_get_children;
		case 1857: return time_source_exists;
		case 1858: return time_seconds_to_bpm;
		case 1859: return time_bpm_to_seconds;
		case 1860: return call_later;
		case 1861: return call_cancel;
		case 1862: return rollback_use_manual_start;
		case 1863: return rollback_define_player;
		case 1864: return rollback_define_input;
		case 1865: return rollback_define_mock_input;
		case 1866: return rollback_define_input_frame_delay;
		case 1867: return rollback_define_extra_network_latency;
		case 1868: return rollback_create_game;
		case 1869: return rollback_join_game;
		case 1870: return rollback_start_game;
		case 1871: return rollback_leave_game;
		case 1872: return rollback_get_input;
		case 1873: return rollback_chat;
		case 1874: return rollback_use_player_prefs;
		case 1875: return rollback_set_player_prefs;
		case 1876: return rollback_get_player_prefs;
		case 1877: return rollback_get_info;
		case 1878: return rollback_use_random_input;
		case 1879: return rollback_display_events;
		case 1880: return rollback_sync_on_frame;
		case 1881: return audio_bus_create;
		case 1882: return audio_effect_create;
		case 1883: return audio_emitter_bus;
		case 1884: return audio_emitter_get_bus;
		default: return live_preinit_js_dummy;
	}
}
if(live_enabled)
function live_preinit_js_func(l_ind) {
	switch (l_ind & ~63) {
		case 0: return live_preinit_js_func_0(l_ind);
		case 64: return live_preinit_js_func_64(l_ind);
		case 128: return live_preinit_js_func_128(l_ind);
		case 192: return live_preinit_js_func_192(l_ind);
		case 256: return live_preinit_js_func_256(l_ind);
		case 320: return live_preinit_js_func_320(l_ind);
		case 384: return live_preinit_js_func_384(l_ind);
		case 448: return live_preinit_js_func_448(l_ind);
		case 512: return live_preinit_js_func_512(l_ind);
		case 576: return live_preinit_js_func_576(l_ind);
		case 640: return live_preinit_js_func_640(l_ind);
		case 704: return live_preinit_js_func_704(l_ind);
		case 768: return live_preinit_js_func_768(l_ind);
		case 832: return live_preinit_js_func_832(l_ind);
		case 896: return live_preinit_js_func_896(l_ind);
		case 960: return live_preinit_js_func_960(l_ind);
		case 1024: return live_preinit_js_func_1024(l_ind);
		case 1088: return live_preinit_js_func_1088(l_ind);
		case 1152: return live_preinit_js_func_1152(l_ind);
		case 1216: return live_preinit_js_func_1216(l_ind);
		case 1280: return live_preinit_js_func_1280(l_ind);
		case 1344: return live_preinit_js_func_1344(l_ind);
		case 1408: return live_preinit_js_func_1408(l_ind);
		case 1472: return live_preinit_js_func_1472(l_ind);
		case 1536: return live_preinit_js_func_1536(l_ind);
		case 1600: return live_preinit_js_func_1600(l_ind);
		case 1664: return live_preinit_js_func_1664(l_ind);
		case 1728: return live_preinit_js_func_1728(l_ind);
		case 1792: return live_preinit_js_func_1792(l_ind);
		case 1856: return live_preinit_js_func_1856(l_ind);
		default: return live_preinit_js_dummy;
	}
}
//*/
